// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user-service/v1/resources/user_auth.resource.v1.proto

package resourcev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enumv1 "github.com/go-micro-saas/user-service/api/user-service/v1/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enumv1.UserGenderEnum_UserGender(0)
)

// Validate checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PingReqMultiError, or nil if none found.
func (m *PingReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PingReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingReqMultiError(errors)
	}

	return nil
}

// PingReqMultiError is an error wrapping multiple validation errors returned
// by PingReq.ValidateAll() if the designated constraints aren't met.
type PingReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingReqMultiError) AllErrors() []error { return m }

// PingReqValidationError is the validation error returned by PingReq.Validate
// if the designated constraints aren't met.
type PingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingReqValidationError) ErrorName() string { return "PingReqValidationError" }

// Error satisfies the builtin error interface
func (e PingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingReqValidationError{}

// Validate checks the field values on PingResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRespMultiError, or nil
// if none found.
func (m *PingResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return PingRespMultiError(errors)
	}

	return nil
}

// PingRespMultiError is an error wrapping multiple validation errors returned
// by PingResp.ValidateAll() if the designated constraints aren't met.
type PingRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRespMultiError) AllErrors() []error { return m }

// PingRespValidationError is the validation error returned by
// PingResp.Validate if the designated constraints aren't met.
type PingRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRespValidationError) ErrorName() string { return "PingRespValidationError" }

// Error satisfies the builtin error interface
func (e PingRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRespValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserNickname

	// no validation rules for UserAvatar

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on LoginOrRegByPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginOrRegByPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginOrRegByPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginOrRegByPhoneReqMultiError, or nil if none found.
func (m *LoginOrRegByPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginOrRegByPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserMobile

	// no validation rules for Password

	// no validation rules for Code

	if len(errors) > 0 {
		return LoginOrRegByPhoneReqMultiError(errors)
	}

	return nil
}

// LoginOrRegByPhoneReqMultiError is an error wrapping multiple validation
// errors returned by LoginOrRegByPhoneReq.ValidateAll() if the designated
// constraints aren't met.
type LoginOrRegByPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginOrRegByPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginOrRegByPhoneReqMultiError) AllErrors() []error { return m }

// LoginOrRegByPhoneReqValidationError is the validation error returned by
// LoginOrRegByPhoneReq.Validate if the designated constraints aren't met.
type LoginOrRegByPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginOrRegByPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginOrRegByPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginOrRegByPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginOrRegByPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginOrRegByPhoneReqValidationError) ErrorName() string {
	return "LoginOrRegByPhoneReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginOrRegByPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginOrRegByPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginOrRegByPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginOrRegByPhoneReqValidationError{}

// Validate checks the field values on RegByUserNameReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegByUserNameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegByUserNameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegByUserNameReqMultiError, or nil if none found.
func (m *RegByUserNameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegByUserNameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for Password

	// no validation rules for PasswordConfirm

	// no validation rules for Code

	if len(errors) > 0 {
		return RegByUserNameReqMultiError(errors)
	}

	return nil
}

// RegByUserNameReqMultiError is an error wrapping multiple validation errors
// returned by RegByUserNameReq.ValidateAll() if the designated constraints
// aren't met.
type RegByUserNameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegByUserNameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegByUserNameReqMultiError) AllErrors() []error { return m }

// RegByUserNameReqValidationError is the validation error returned by
// RegByUserNameReq.Validate if the designated constraints aren't met.
type RegByUserNameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegByUserNameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegByUserNameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegByUserNameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegByUserNameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegByUserNameReqValidationError) ErrorName() string { return "RegByUserNameReqValidationError" }

// Error satisfies the builtin error interface
func (e RegByUserNameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegByUserNameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegByUserNameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegByUserNameReqValidationError{}

// Validate checks the field values on LoginByUserNameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByUserNameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByUserNameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByUserNameReqMultiError, or nil if none found.
func (m *LoginByUserNameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByUserNameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for Password

	// no validation rules for Code

	if len(errors) > 0 {
		return LoginByUserNameReqMultiError(errors)
	}

	return nil
}

// LoginByUserNameReqMultiError is an error wrapping multiple validation errors
// returned by LoginByUserNameReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByUserNameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByUserNameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByUserNameReqMultiError) AllErrors() []error { return m }

// LoginByUserNameReqValidationError is the validation error returned by
// LoginByUserNameReq.Validate if the designated constraints aren't met.
type LoginByUserNameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByUserNameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByUserNameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByUserNameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByUserNameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByUserNameReqValidationError) ErrorName() string {
	return "LoginByUserNameReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByUserNameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByUserNameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByUserNameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByUserNameReqValidationError{}

// Validate checks the field values on RegByEmailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegByEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegByEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegByEmailReqMultiError, or
// nil if none found.
func (m *RegByEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegByEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for PasswordConfirm

	// no validation rules for Code

	if len(errors) > 0 {
		return RegByEmailReqMultiError(errors)
	}

	return nil
}

// RegByEmailReqMultiError is an error wrapping multiple validation errors
// returned by RegByEmailReq.ValidateAll() if the designated constraints
// aren't met.
type RegByEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegByEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegByEmailReqMultiError) AllErrors() []error { return m }

// RegByEmailReqValidationError is the validation error returned by
// RegByEmailReq.Validate if the designated constraints aren't met.
type RegByEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegByEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegByEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegByEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegByEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegByEmailReqValidationError) ErrorName() string { return "RegByEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e RegByEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegByEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegByEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegByEmailReqValidationError{}

// Validate checks the field values on LoginByPhoneReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByPhoneReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByPhoneReqMultiError, or nil if none found.
func (m *LoginByPhoneReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByPhoneReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Password

	// no validation rules for Code

	if len(errors) > 0 {
		return LoginByPhoneReqMultiError(errors)
	}

	return nil
}

// LoginByPhoneReqMultiError is an error wrapping multiple validation errors
// returned by LoginByPhoneReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByPhoneReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByPhoneReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByPhoneReqMultiError) AllErrors() []error { return m }

// LoginByPhoneReqValidationError is the validation error returned by
// LoginByPhoneReq.Validate if the designated constraints aren't met.
type LoginByPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByPhoneReqValidationError) ErrorName() string { return "LoginByPhoneReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByPhoneReqValidationError{}

// Validate checks the field values on LoginByEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginByEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByEmailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByEmailReqMultiError, or nil if none found.
func (m *LoginByEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for Code

	if len(errors) > 0 {
		return LoginByEmailReqMultiError(errors)
	}

	return nil
}

// LoginByEmailReqMultiError is an error wrapping multiple validation errors
// returned by LoginByEmailReq.ValidateAll() if the designated constraints
// aren't met.
type LoginByEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByEmailReqMultiError) AllErrors() []error { return m }

// LoginByEmailReqValidationError is the validation error returned by
// LoginByEmailReq.Validate if the designated constraints aren't met.
type LoginByEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByEmailReqValidationError) ErrorName() string { return "LoginByEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginByEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByEmailReqValidationError{}

// Validate checks the field values on OpenApiLoginReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OpenApiLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenApiLoginReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenApiLoginReqMultiError, or nil if none found.
func (m *OpenApiLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenApiLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessId

	// no validation rules for AccessSecret

	if len(errors) > 0 {
		return OpenApiLoginReqMultiError(errors)
	}

	return nil
}

// OpenApiLoginReqMultiError is an error wrapping multiple validation errors
// returned by OpenApiLoginReq.ValidateAll() if the designated constraints
// aren't met.
type OpenApiLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenApiLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenApiLoginReqMultiError) AllErrors() []error { return m }

// OpenApiLoginReqValidationError is the validation error returned by
// OpenApiLoginReq.Validate if the designated constraints aren't met.
type OpenApiLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenApiLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenApiLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenApiLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenApiLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenApiLoginReqValidationError) ErrorName() string { return "OpenApiLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e OpenApiLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenApiLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenApiLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenApiLoginReqValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespMultiError, or nil
// if none found.
func (m *LoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRespValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccessToken

	// no validation rules for AccessTokenExpiredAt

	// no validation rules for RefreshToken

	// no validation rules for RefreshTokenExpiredAt

	if len(errors) > 0 {
		return LoginRespMultiError(errors)
	}

	return nil
}

// LoginRespMultiError is an error wrapping multiple validation errors returned
// by LoginResp.ValidateAll() if the designated constraints aren't met.
type LoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespMultiError) AllErrors() []error { return m }

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on RefreshTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenReqMultiError, or nil if none found.
func (m *RefreshTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshTokenReqMultiError(errors)
	}

	return nil
}

// RefreshTokenReqMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenReq.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenReqMultiError) AllErrors() []error { return m }

// RefreshTokenReqValidationError is the validation error returned by
// RefreshTokenReq.Validate if the designated constraints aren't met.
type RefreshTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenReqValidationError) ErrorName() string { return "RefreshTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e RefreshTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenReqValidationError{}

// Validate checks the field values on ChangePasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordReqMultiError, or nil if none found.
func (m *ChangePasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OldPassword

	// no validation rules for NewPassword

	// no validation rules for NewPasswordConfirm

	if len(errors) > 0 {
		return ChangePasswordReqMultiError(errors)
	}

	return nil
}

// ChangePasswordReqMultiError is an error wrapping multiple validation errors
// returned by ChangePasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ChangePasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordReqMultiError) AllErrors() []error { return m }

// ChangePasswordReqValidationError is the validation error returned by
// ChangePasswordReq.Validate if the designated constraints aren't met.
type ChangePasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordReqValidationError) ErrorName() string {
	return "ChangePasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordReqValidationError{}

// Validate checks the field values on ChangePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRespMultiError, or nil if none found.
func (m *ChangePasswordResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePasswordRespMultiError(errors)
	}

	return nil
}

// ChangePasswordRespMultiError is an error wrapping multiple validation errors
// returned by ChangePasswordResp.ValidateAll() if the designated constraints
// aren't met.
type ChangePasswordRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRespMultiError) AllErrors() []error { return m }

// ChangePasswordRespValidationError is the validation error returned by
// ChangePasswordResp.Validate if the designated constraints aren't met.
type ChangePasswordRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRespValidationError) ErrorName() string {
	return "ChangePasswordRespValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRespValidationError{}

// Validate checks the field values on ChangeAvatarReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeAvatarReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAvatarReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAvatarReqMultiError, or nil if none found.
func (m *ChangeAvatarReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAvatarReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserAvatar

	if len(errors) > 0 {
		return ChangeAvatarReqMultiError(errors)
	}

	return nil
}

// ChangeAvatarReqMultiError is an error wrapping multiple validation errors
// returned by ChangeAvatarReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeAvatarReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAvatarReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAvatarReqMultiError) AllErrors() []error { return m }

// ChangeAvatarReqValidationError is the validation error returned by
// ChangeAvatarReq.Validate if the designated constraints aren't met.
type ChangeAvatarReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAvatarReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAvatarReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAvatarReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAvatarReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAvatarReqValidationError) ErrorName() string { return "ChangeAvatarReqValidationError" }

// Error satisfies the builtin error interface
func (e ChangeAvatarReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAvatarReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAvatarReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAvatarReqValidationError{}

// Validate checks the field values on ChangeAvatarResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeAvatarResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAvatarResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAvatarRespMultiError, or nil if none found.
func (m *ChangeAvatarResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAvatarResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeAvatarRespMultiError(errors)
	}

	return nil
}

// ChangeAvatarRespMultiError is an error wrapping multiple validation errors
// returned by ChangeAvatarResp.ValidateAll() if the designated constraints
// aren't met.
type ChangeAvatarRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAvatarRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAvatarRespMultiError) AllErrors() []error { return m }

// ChangeAvatarRespValidationError is the validation error returned by
// ChangeAvatarResp.Validate if the designated constraints aren't met.
type ChangeAvatarRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAvatarRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAvatarRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAvatarRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAvatarRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAvatarRespValidationError) ErrorName() string { return "ChangeAvatarRespValidationError" }

// Error satisfies the builtin error interface
func (e ChangeAvatarRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAvatarResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAvatarRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAvatarRespValidationError{}

// Validate checks the field values on ChangeMobileReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeMobileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMobileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMobileReqMultiError, or nil if none found.
func (m *ChangeMobileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMobileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserMobile

	if len(errors) > 0 {
		return ChangeMobileReqMultiError(errors)
	}

	return nil
}

// ChangeMobileReqMultiError is an error wrapping multiple validation errors
// returned by ChangeMobileReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeMobileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMobileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMobileReqMultiError) AllErrors() []error { return m }

// ChangeMobileReqValidationError is the validation error returned by
// ChangeMobileReq.Validate if the designated constraints aren't met.
type ChangeMobileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMobileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMobileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMobileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMobileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMobileReqValidationError) ErrorName() string { return "ChangeMobileReqValidationError" }

// Error satisfies the builtin error interface
func (e ChangeMobileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMobileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMobileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMobileReqValidationError{}

// Validate checks the field values on ChangeMobileResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeMobileResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeMobileResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeMobileRespMultiError, or nil if none found.
func (m *ChangeMobileResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeMobileResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeMobileRespMultiError(errors)
	}

	return nil
}

// ChangeMobileRespMultiError is an error wrapping multiple validation errors
// returned by ChangeMobileResp.ValidateAll() if the designated constraints
// aren't met.
type ChangeMobileRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMobileRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMobileRespMultiError) AllErrors() []error { return m }

// ChangeMobileRespValidationError is the validation error returned by
// ChangeMobileResp.Validate if the designated constraints aren't met.
type ChangeMobileRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeMobileRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeMobileRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeMobileRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeMobileRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeMobileRespValidationError) ErrorName() string { return "ChangeMobileRespValidationError" }

// Error satisfies the builtin error interface
func (e ChangeMobileRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeMobileResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeMobileRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeMobileRespValidationError{}

// Validate checks the field values on ChangeEmailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangeEmailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeEmailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChangeEmailReqMultiError,
// or nil if none found.
func (m *ChangeEmailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeEmailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserEmail

	if len(errors) > 0 {
		return ChangeEmailReqMultiError(errors)
	}

	return nil
}

// ChangeEmailReqMultiError is an error wrapping multiple validation errors
// returned by ChangeEmailReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeEmailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeEmailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeEmailReqMultiError) AllErrors() []error { return m }

// ChangeEmailReqValidationError is the validation error returned by
// ChangeEmailReq.Validate if the designated constraints aren't met.
type ChangeEmailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEmailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEmailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEmailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEmailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEmailReqValidationError) ErrorName() string { return "ChangeEmailReqValidationError" }

// Error satisfies the builtin error interface
func (e ChangeEmailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEmailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEmailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEmailReqValidationError{}

// Validate checks the field values on ChangeEmailResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeEmailResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeEmailResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeEmailRespMultiError, or nil if none found.
func (m *ChangeEmailResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeEmailResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeEmailRespMultiError(errors)
	}

	return nil
}

// ChangeEmailRespMultiError is an error wrapping multiple validation errors
// returned by ChangeEmailResp.ValidateAll() if the designated constraints
// aren't met.
type ChangeEmailRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeEmailRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeEmailRespMultiError) AllErrors() []error { return m }

// ChangeEmailRespValidationError is the validation error returned by
// ChangeEmailResp.Validate if the designated constraints aren't met.
type ChangeEmailRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEmailRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEmailRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEmailRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEmailRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEmailRespValidationError) ErrorName() string { return "ChangeEmailRespValidationError" }

// Error satisfies the builtin error interface
func (e ChangeEmailRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEmailResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEmailRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEmailRespValidationError{}

// Validate checks the field values on ChangeNicknameReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeNicknameReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeNicknameReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeNicknameReqMultiError, or nil if none found.
func (m *ChangeNicknameReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeNicknameReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserNickname

	if len(errors) > 0 {
		return ChangeNicknameReqMultiError(errors)
	}

	return nil
}

// ChangeNicknameReqMultiError is an error wrapping multiple validation errors
// returned by ChangeNicknameReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeNicknameReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeNicknameReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeNicknameReqMultiError) AllErrors() []error { return m }

// ChangeNicknameReqValidationError is the validation error returned by
// ChangeNicknameReq.Validate if the designated constraints aren't met.
type ChangeNicknameReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeNicknameReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeNicknameReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeNicknameReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeNicknameReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeNicknameReqValidationError) ErrorName() string {
	return "ChangeNicknameReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeNicknameReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeNicknameReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeNicknameReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeNicknameReqValidationError{}

// Validate checks the field values on ChangeNicknameResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeNicknameResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeNicknameResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeNicknameRespMultiError, or nil if none found.
func (m *ChangeNicknameResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeNicknameResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeNicknameRespMultiError(errors)
	}

	return nil
}

// ChangeNicknameRespMultiError is an error wrapping multiple validation errors
// returned by ChangeNicknameResp.ValidateAll() if the designated constraints
// aren't met.
type ChangeNicknameRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeNicknameRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeNicknameRespMultiError) AllErrors() []error { return m }

// ChangeNicknameRespValidationError is the validation error returned by
// ChangeNicknameResp.Validate if the designated constraints aren't met.
type ChangeNicknameRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeNicknameRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeNicknameRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeNicknameRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeNicknameRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeNicknameRespValidationError) ErrorName() string {
	return "ChangeNicknameRespValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeNicknameRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeNicknameResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeNicknameRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeNicknameRespValidationError{}

// Validate checks the field values on ChangeGenderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeGenderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeGenderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeGenderReqMultiError, or nil if none found.
func (m *ChangeGenderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeGenderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserGender

	if len(errors) > 0 {
		return ChangeGenderReqMultiError(errors)
	}

	return nil
}

// ChangeGenderReqMultiError is an error wrapping multiple validation errors
// returned by ChangeGenderReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeGenderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeGenderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeGenderReqMultiError) AllErrors() []error { return m }

// ChangeGenderReqValidationError is the validation error returned by
// ChangeGenderReq.Validate if the designated constraints aren't met.
type ChangeGenderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeGenderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeGenderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeGenderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeGenderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeGenderReqValidationError) ErrorName() string { return "ChangeGenderReqValidationError" }

// Error satisfies the builtin error interface
func (e ChangeGenderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeGenderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeGenderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeGenderReqValidationError{}

// Validate checks the field values on ChangeGenderResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeGenderResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeGenderResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeGenderRespMultiError, or nil if none found.
func (m *ChangeGenderResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeGenderResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeGenderRespMultiError(errors)
	}

	return nil
}

// ChangeGenderRespMultiError is an error wrapping multiple validation errors
// returned by ChangeGenderResp.ValidateAll() if the designated constraints
// aren't met.
type ChangeGenderRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeGenderRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeGenderRespMultiError) AllErrors() []error { return m }

// ChangeGenderRespValidationError is the validation error returned by
// ChangeGenderResp.Validate if the designated constraints aren't met.
type ChangeGenderRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeGenderRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeGenderRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeGenderRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeGenderRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeGenderRespValidationError) ErrorName() string { return "ChangeGenderRespValidationError" }

// Error satisfies the builtin error interface
func (e ChangeGenderRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeGenderResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeGenderRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeGenderRespValidationError{}
