// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user-service/v1/resources/user.resource.v1.proto

package resourcev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enumv1 "github.com/go-micro-saas/user-service/api/user-service/v1/enums"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enumv1.UserGenderEnum_UserGender(0)
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedTime

	// no validation rules for UpdatedTime

	// no validation rules for DeletedTime

	// no validation rules for UserId

	// no validation rules for UserPhone

	// no validation rules for UserEmail

	// no validation rules for UserNickname

	// no validation rules for UserAvatar

	// no validation rules for UserGender

	// no validation rules for RegisterType

	// no validation rules for UserStatus

	// no validation rules for DisableTime

	// no validation rules for BlacklistTime

	// no validation rules for PasswordHash

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserSaveReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserSaveReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSaveReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserSaveReqMultiError, or
// nil if none found.
func (m *UserSaveReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSaveReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedTime

	// no validation rules for UpdatedTime

	// no validation rules for DeletedTime

	// no validation rules for UserId

	// no validation rules for UserPhone

	// no validation rules for UserEmail

	// no validation rules for UserNickname

	// no validation rules for UserAvatar

	// no validation rules for UserGender

	// no validation rules for RegisterType

	// no validation rules for UserStatus

	// no validation rules for DisableTime

	// no validation rules for BlacklistTime

	// no validation rules for PasswordHash

	if len(errors) > 0 {
		return UserSaveReqMultiError(errors)
	}

	return nil
}

// UserSaveReqMultiError is an error wrapping multiple validation errors
// returned by UserSaveReq.ValidateAll() if the designated constraints aren't met.
type UserSaveReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSaveReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSaveReqMultiError) AllErrors() []error { return m }

// UserSaveReqValidationError is the validation error returned by
// UserSaveReq.Validate if the designated constraints aren't met.
type UserSaveReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSaveReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSaveReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSaveReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSaveReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSaveReqValidationError) ErrorName() string { return "UserSaveReqValidationError" }

// Error satisfies the builtin error interface
func (e UserSaveReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSaveReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSaveReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSaveReqValidationError{}

// Validate checks the field values on UserIdReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserIdReqMultiError, or nil
// if none found.
func (m *UserIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return UserIdReqMultiError(errors)
	}

	return nil
}

// UserIdReqMultiError is an error wrapping multiple validation errors returned
// by UserIdReq.ValidateAll() if the designated constraints aren't met.
type UserIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdReqMultiError) AllErrors() []error { return m }

// UserIdReqValidationError is the validation error returned by
// UserIdReq.Validate if the designated constraints aren't met.
type UserIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdReqValidationError) ErrorName() string { return "UserIdReqValidationError" }

// Error satisfies the builtin error interface
func (e UserIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdReqValidationError{}

// Validate checks the field values on UserIdsReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserIdsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserIdsReqMultiError, or
// nil if none found.
func (m *UserIdsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserIdsReqMultiError(errors)
	}

	return nil
}

// UserIdsReqMultiError is an error wrapping multiple validation errors
// returned by UserIdsReq.ValidateAll() if the designated constraints aren't met.
type UserIdsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdsReqMultiError) AllErrors() []error { return m }

// UserIdsReqValidationError is the validation error returned by
// UserIdsReq.Validate if the designated constraints aren't met.
type UserIdsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdsReqValidationError) ErrorName() string { return "UserIdsReqValidationError" }

// Error satisfies the builtin error interface
func (e UserIdsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdsReqValidationError{}

// Validate checks the field values on UserListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserListReqMultiError, or
// nil if none found.
func (m *UserListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPageRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserListReqValidationError{
					field:  "PageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserListReqValidationError{
					field:  "PageRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserListReqValidationError{
				field:  "PageRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserListReqMultiError(errors)
	}

	return nil
}

// UserListReqMultiError is an error wrapping multiple validation errors
// returned by UserListReq.ValidateAll() if the designated constraints aren't met.
type UserListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListReqMultiError) AllErrors() []error { return m }

// UserListReqValidationError is the validation error returned by
// UserListReq.Validate if the designated constraints aren't met.
type UserListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListReqValidationError) ErrorName() string { return "UserListReqValidationError" }

// Error satisfies the builtin error interface
func (e UserListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListReqValidationError{}

// Validate checks the field values on UserListResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserListRespMultiError, or
// nil if none found.
func (m *UserListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UserListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserListRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserListRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPageInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserListRespValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserListRespValidationError{
					field:  "PageInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPageInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserListRespValidationError{
				field:  "PageInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserListRespMultiError(errors)
	}

	return nil
}

// UserListRespMultiError is an error wrapping multiple validation errors
// returned by UserListResp.ValidateAll() if the designated constraints aren't met.
type UserListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserListRespMultiError) AllErrors() []error { return m }

// UserListRespValidationError is the validation error returned by
// UserListResp.Validate if the designated constraints aren't met.
type UserListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListRespValidationError) ErrorName() string { return "UserListRespValidationError" }

// Error satisfies the builtin error interface
func (e UserListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListRespValidationError{}

// Validate checks the field values on UserProcessResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserProcessResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProcessResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserProcessResultMultiError, or nil if none found.
func (m *UserProcessResult) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProcessResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSuccess

	if len(errors) > 0 {
		return UserProcessResultMultiError(errors)
	}

	return nil
}

// UserProcessResultMultiError is an error wrapping multiple validation errors
// returned by UserProcessResult.ValidateAll() if the designated constraints
// aren't met.
type UserProcessResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProcessResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProcessResultMultiError) AllErrors() []error { return m }

// UserProcessResultValidationError is the validation error returned by
// UserProcessResult.Validate if the designated constraints aren't met.
type UserProcessResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProcessResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProcessResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProcessResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProcessResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProcessResultValidationError) ErrorName() string {
	return "UserProcessResultValidationError"
}

// Error satisfies the builtin error interface
func (e UserProcessResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProcessResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProcessResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProcessResultValidationError{}
