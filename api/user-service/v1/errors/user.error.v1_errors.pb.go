// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errorv1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
	strconv "strconv"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 未知错误
func IsUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_UNKNOWN.String() && e.Code == 500
}

// 未知错误
func ErrorUnknown(format string, args ...interface{}) *errors.Error {
	e := errors.New(500, ERROR_UNKNOWN.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNKNOWN.Number()))}
	return e
}

// 用户不存在
func IsS103UserNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S103_USER_NOT_EXIST.String() && e.Code == 400
}

// 用户不存在
func ErrorS103UserNotExist(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S103_USER_NOT_EXIST.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S103_USER_NOT_EXIST.Number()))}
	return e
}

// 用户已存在
func IsS103UserExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S103_USER_EXIST.String() && e.Code == 400
}

// 用户已存在
func ErrorS103UserExist(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S103_USER_EXIST.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S103_USER_EXIST.Number()))}
	return e
}

// 用户名不合法
func IsS103UserNameInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S103_USER_NAME_INVALID.String() && e.Code == 400
}

// 用户名不合法
func ErrorS103UserNameInvalid(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S103_USER_NAME_INVALID.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S103_USER_NAME_INVALID.Number()))}
	return e
}

// 用户名已存在
func IsS103UserNameExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S103_USER_NAME_EXIST.String() && e.Code == 400
}

// 用户名已存在
func ErrorS103UserNameExist(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S103_USER_NAME_EXIST.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S103_USER_NAME_EXIST.Number()))}
	return e
}

// 用户密码不合法
func IsS103UserPasswordInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S103_USER_PASSWORD_INVALID.String() && e.Code == 400
}

// 用户密码不合法
func ErrorS103UserPasswordInvalid(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S103_USER_PASSWORD_INVALID.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S103_USER_PASSWORD_INVALID.Number()))}
	return e
}

// 用户密码不正确
func IsS103UserPasswordIncorrect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S103_USER_PASSWORD_INCORRECT.String() && e.Code == 400
}

// 用户密码不正确
func ErrorS103UserPasswordIncorrect(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S103_USER_PASSWORD_INCORRECT.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S103_USER_PASSWORD_INCORRECT.Number()))}
	return e
}

// 令牌已失效
func IsS103UserTokenInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S103_USER_TOKEN_INVALID.String() && e.Code == 400
}

// 令牌已失效
func ErrorS103UserTokenInvalid(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S103_USER_TOKEN_INVALID.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S103_USER_TOKEN_INVALID.Number()))}
	return e
}

// 账户已过期
func IsS103UserAccountExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S103_USER_ACCOUNT_EXPIRE.String() && e.Code == 400
}

// 账户已过期
func ErrorS103UserAccountExpire(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S103_USER_ACCOUNT_EXPIRE.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S103_USER_ACCOUNT_EXPIRE.Number()))}
	return e
}

// 无效的登录状态
func IsS103UserStatusNotAllow(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S103_USER_STATUS_NOT_ALLOW.String() && e.Code == 400
}

// 无效的登录状态
func ErrorS103UserStatusNotAllow(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S103_USER_STATUS_NOT_ALLOW.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S103_USER_STATUS_NOT_ALLOW.Number()))}
	return e
}

// 不在有效的激活期间
func IsS103UserActiveTimeInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_S103_USER_ACTIVE_TIME_INVALID.String() && e.Code == 400
}

// 不在有效的激活期间
func ErrorS103UserActiveTimeInvalid(format string, args ...interface{}) *errors.Error {
	e := errors.New(400, ERROR_S103_USER_ACTIVE_TIME_INVALID.String(), fmt.Sprintf(format, args...))
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_S103_USER_ACTIVE_TIME_INVALID.Number()))}
	return e
}
