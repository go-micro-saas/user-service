// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user-service/v1/enums/user.enum.v1.proto

package enumv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInitEnum with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInitEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInitEnum with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInitEnumMultiError, or
// nil if none found.
func (m *UserInitEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInitEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserInitEnumMultiError(errors)
	}

	return nil
}

// UserInitEnumMultiError is an error wrapping multiple validation errors
// returned by UserInitEnum.ValidateAll() if the designated constraints aren't met.
type UserInitEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInitEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInitEnumMultiError) AllErrors() []error { return m }

// UserInitEnumValidationError is the validation error returned by
// UserInitEnum.Validate if the designated constraints aren't met.
type UserInitEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInitEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInitEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInitEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInitEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInitEnumValidationError) ErrorName() string { return "UserInitEnumValidationError" }

// Error satisfies the builtin error interface
func (e UserInitEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInitEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInitEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInitEnumValidationError{}

// Validate checks the field values on UserStatusEnum with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserStatusEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserStatusEnum with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserStatusEnumMultiError,
// or nil if none found.
func (m *UserStatusEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *UserStatusEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserStatusEnumMultiError(errors)
	}

	return nil
}

// UserStatusEnumMultiError is an error wrapping multiple validation errors
// returned by UserStatusEnum.ValidateAll() if the designated constraints
// aren't met.
type UserStatusEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserStatusEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserStatusEnumMultiError) AllErrors() []error { return m }

// UserStatusEnumValidationError is the validation error returned by
// UserStatusEnum.Validate if the designated constraints aren't met.
type UserStatusEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserStatusEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserStatusEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserStatusEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserStatusEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserStatusEnumValidationError) ErrorName() string { return "UserStatusEnumValidationError" }

// Error satisfies the builtin error interface
func (e UserStatusEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserStatusEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserStatusEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserStatusEnumValidationError{}

// Validate checks the field values on UserGenderEnum with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGenderEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGenderEnum with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGenderEnumMultiError,
// or nil if none found.
func (m *UserGenderEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGenderEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserGenderEnumMultiError(errors)
	}

	return nil
}

// UserGenderEnumMultiError is an error wrapping multiple validation errors
// returned by UserGenderEnum.ValidateAll() if the designated constraints
// aren't met.
type UserGenderEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGenderEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGenderEnumMultiError) AllErrors() []error { return m }

// UserGenderEnumValidationError is the validation error returned by
// UserGenderEnum.Validate if the designated constraints aren't met.
type UserGenderEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGenderEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGenderEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGenderEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGenderEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGenderEnumValidationError) ErrorName() string { return "UserGenderEnumValidationError" }

// Error satisfies the builtin error interface
func (e UserGenderEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGenderEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGenderEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGenderEnumValidationError{}

// Validate checks the field values on UserRegisterTypeEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterTypeEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterTypeEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterTypeEnumMultiError, or nil if none found.
func (m *UserRegisterTypeEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterTypeEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserRegisterTypeEnumMultiError(errors)
	}

	return nil
}

// UserRegisterTypeEnumMultiError is an error wrapping multiple validation
// errors returned by UserRegisterTypeEnum.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterTypeEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterTypeEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterTypeEnumMultiError) AllErrors() []error { return m }

// UserRegisterTypeEnumValidationError is the validation error returned by
// UserRegisterTypeEnum.Validate if the designated constraints aren't met.
type UserRegisterTypeEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterTypeEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterTypeEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterTypeEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterTypeEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterTypeEnumValidationError) ErrorName() string {
	return "UserRegisterTypeEnumValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterTypeEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterTypeEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterTypeEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterTypeEnumValidationError{}
